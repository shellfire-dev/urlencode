# This is an implementation of RFC 6570 (http://tools.ietf.org/html/rfc6570)
# It implements URL Templates up to Level 4, with exceptions:
# - the binding of key-value maps is not supported
# - %-encoded parameters are not supported (but %-encoding of unencoded parameters is)

core_usesIn urlencode

# http://tools.ietf.org/html/rfc6570
core_dependency_requires '*' sed
urlencode_template()
{
	# We assume templates are already-encoded
	local template="$1"
	
	# -E for BSD, -r for GNU / Busybox extended
	
	#echo 'hello{name}john{more}end' | gsed -r -e 's,\$,\\\$,g' -e 's,",\\",g' -e "s,^([^}]+)\{,urlencode_literal '\1';{,g" -e "s,\}([^{]+)\$,}urlencode_literal '\1',g" -e "s,\}([^}{]+)\{,}urlencode_literal '\1';{,g" -e "s,\{([^{}]+)\},urlencode_template_replace '\1';,g"
	
	# Whilst using sed and eval works, $ remains a problem and so is escaped
	eval "$(printf '%s' "$template"  |  sed -r -e 's,\$,\\\$,g' -e 's,",\\",g' -e 's,^([^}]+)\{,urlencode_literal "\1";{,g' -e 's,\}([^{]+)\$,}urlencode_literal "\1",g' -e 's,\}([^}{]+)\{,}urlencode_literal "\1";{,g' -e 's,\{([^{}]+)\},urlencode_template_replace "\1";,g')"
}

core_dependency_requires '*' sed
urlencode_template_replace()
{
	local expandedExpresion="$1"
	
	if core_variable_isUnset _urlencode_template_temporaryFile; then
		local TMP_FILE
		core_temporaryFiles_newFileToRemoveOnExit
		_urlencode_template_temporaryFile="$TMP_FILE"
	fi
	
	# There is no prefix if the result of expansion is an empty string
	local prefix
	local potentialOperator="$(core_variable_firstCharacter "$1")"
	{
		case "$potentialOperator" in
		
			# we'll use urlencode_template_replace_XXXX for variable names
			'+')
				prefix=''
				urlencode_template_replace_operate "$(core_variable_allButFirst "$expandedExpresion")" ',' urlencode_reserved urlencode_template_replace_operator_printNameEqualsNothing
			;;
		
			'#')
				prefix='#'
				urlencode_template_replace_operate "$(core_variable_allButFirst "$expandedExpresion")" ',' urlencode_reserved urlencode_template_replace_operator_printNameEqualsNothing
			;;
		
			'.')
				prefix='.'
				urlencode_template_replace_operate "$(core_variable_allButFirst "$expandedExpresion")" '.' urlencode_pathPiece urlencode_template_replace_operator_printNameEqualsNothing
			;;
		
			'/')
				prefix='/'
				urlencode_template_replace_operate "$(core_variable_allButFirst "$expandedExpresion")" '/' urlencode_pathPiece urlencode_template_replace_operator_printNameEqualsNothing
			;;
		
			';')
				prefix=';'
				urlencode_template_replace_operate "$(core_variable_allButFirst "$expandedExpresion")" ';' urlencode_pathPiece urlencode_template_replace_operator_printNameEqualsVarEquals
			;;
		
			'?')
				prefix='?'
				urlencode_template_replace_operate "$(core_variable_allButFirst "$expandedExpresion")" '&' urlencode_pathPiece urlencode_template_replace_operator_printNameEqualsVarEquals
			;;
		
			'&')
				prefix='&'
				urlencode_template_replace_operate "$(core_variable_allButFirst "$expandedExpresion")" '&' urlencode_pathPiece urlencode_template_replace_operator_printNameEqualsVarEquals
			;;
		
			'='|','|'!'|'@'|'|')
				prefix=''
				core_message WARN "Reserved operator '$potentialOperator' is not supported"
				return 1
			;;
		
			*)
				prefix=''
				urlencode_template_replace_operate "$expandedExpresion" ',' urlencode_pathPiece urlencode_template_replace_operator_printNameEqualsNothing
			;;
		
		esac
	} >"$_urlencode_template_temporaryFile"
	if [ -s "$_urlencode_template_temporaryFile" ]; then
		urlencode_template_result="${prefix}$(<"$_urlencode_template_temporaryFile")"
	fi
}

# Not supported:-
# - keys (maps)
# - percent-encoded variable names (silly idea - clearly they don't need to be)
urlencode_template_replace_operate()
{
	local expressionLessOperator="$1"
	local separator="$2"
	local encodingFunction="$3"
	local printNameEquals="$4"
	
	IFS=',' set -- $expressionLessOperator
	
	local variableName
	local ourVariableName
	local isAfterFirst=0
	local core_variable_indirectValue_result
	
	for variableName in "$@"
	do
		if [ $isAfterFirst -eq 1 ]; then
			printf '%s' "$separator"
		else
			isAfterFirst=1
		fi
		
		# Level 4 Exploded
		if core_variable_endsWith "$variableName" '*'; then
			variableName="$(core_variable_allButLast "$variableName")"
			ourVariableName=urlencode_template_variable_${variableName}
			if core_variable_array_isSet "$ourVariableName"; then
				
				local listIsAfterFirst=0
				urlencode_template_replace_operate_callback1()
				{
					if [ $listIsAfterFirst -eq 1 ]; then
						printf '%s' "$separator"
					else
						listIsAfterFirst=1
					fi
					$printNameEquals
					$encodingFunction "$core_variable_array_element"
				}
				core_variable_array_iterate "$ourVariableName" urlencode_template_replace_operate_callback1
				
			elif core_variable_isSet "$ourVariableName"; then
				
				# exploded single value

				$printNameEquals
				core_variable_indirectValue "$ourVariableName"
				$encodingFunction "$core_variable_indirectValue_result"
				
			else
				
				core_message INFO "Exploded Level 4 variable '$variableName' is unset; ignoring"
				
			fi
			
		# Level 4 Substring	
		elif core_variable_contains "$variableName" ':'; then
			
			local length
			IFS=':' read -r variableName length <<-EOF
				${variableName}
			EOF
	
			case "$length" in
			    
				*[!0-9]*)
					core_message WARN "Substring Level 4 variable '$variableName' has a non-integer length"
					return 1
				;;
				
			esac
			
			if [ $length -gt 10000 ]; then
				core_message WARN "Substring Level 4 variable '$variableName' has exceeds maximum length ($length)"
				return 1
			fi

			ourVariableName=urlencode_template_variable_${variableName}
			if core_variable_array_isSet "$ourVariableName"; then
				core_message WARN "Variable '$variableName' is an array with a substring"
				return 1
			elif core_variable_isUnset "$ourVariableName"; then
				core_message INFO "Variable '$variableName' with a substring is unset; ignoring"
				continue
			fi
			
			$printNameEquals
			
			core_variable_indirectValue "$ourVariableName"
			local totalLength="${#core_variable_indirectValue_result}"
			if [ $length -ge $totalLength ]; then
				$encodingFunction "$core_variable_indirectValue_result"
			else
				$encodingFunction "$(core_variable_allButLastN "$core_variable_indirectValue_result" $((totalLength-length)))"
			fi
			
		# Level 4 but no oddities
		else
			ourVariableName=urlencode_template_variable_${variableName}
			
			if core_variable_array_isSet "$ourVariableName"; then
				
				$printNameEquals
				
				local listIsAfterFirst=0
				urlencode_template_replace_operate_callback2()
				{
					if [ $listIsAfterFirst -eq 1 ]; then
						printf ','
					else
						listIsAfterFirst=1
					fi
					$encodingFunction "$core_variable_array_element"
				}
				core_variable_array_iterate "$ourVariableName" urlencode_template_replace_operate_callback2
				
			elif core_variable_isSet "$ourVariableName"; then
				
				$printNameEquals
				
				core_variable_indirectValue "$ourVariableName"
				$encodingFunction "$core_variable_indirectValue_result"
				
			else
				
				core_message INFO "Variable '$variableName' is unset; ignoring"
				
			fi
			
		fi
		
	done
}

urlencode_template_replace_operator_printNameEqualsNothing()
{
	:
}

urlencode_template_replace_operator_printNameEqualsVarEquals()
{
	# Won't work is the variableName is ALREADY %-encoded, which, apparently, is allowed...
	printf '%s=' "$($encodingFunction "$variableName")"
}
