# This approach is overly conservative, but it works
urlencode_pathPiece()
{
	printf "%s" "$1" | awk '
BEGIN {
	srand()
	FS=""
	RS="n/o/m/a/t/c/h" rand()
	OFS=""
	ORS=""
	
	for (n = 0; n < 256; n++)
	{
		ord[sprintf("%c", n)] = n
		hex[sprintf("%c", n)] = "%" sprintf("%02X", n)
	}
}

{
	for (i = 1; i <= NF; i++)
	{
		x=ord[$i]
		
		# Unreserved characters
		if ( (x >= 48 && x <= 57) || (x >= 65 && x <= 90) || (x >= 97 && x <= 122) || (x == 45 || x == 46 || x == 95 || x == 126) )
		{
			printf("%s", $i)
		}
		else
		{
			printf("%s", hex[$i])
		}
	}
}'
}

core_dependency_requires '*' curl
urlencode_form()
{
	# newer versions return 0, older versions 3
	set +e
	local data="$(curl --silent --output /dev/null --write-out '%{url_effective}' --get --url '' --data-urlencode "$pathPiece")"
	set -e
	printf '%s' "${data##/?}"
}

urlencode_xWwwFormUrlEncoded()
{
	local isAfterFirst=0
	while [ $# -ne 0 ]
	do
		if [ $isAfterFirst -eq 1 ]; then
			printf '&'
		else
			isAfterFirst=1
		fi
		
		urlencode_form "$1"
		printf '='
		urlencode_form "$2"
		shift 2
	done
}

# http://tools.ietf.org/html/rfc6570#section-2.1 and section 3.1 could be better written, or, even better, should be one section.
urlencode_literal()
{
	printf "%s" "$1" | awk '
BEGIN {
	srand()
	FS=""
	RS="n/o/m/a/t/c/h" rand()
	OFS=""
	ORS=""
	
	for (n = 0; n < 256; n++)
	{
		ord[sprintf("%c", n)] = n
		hex[sprintf("%c", n)] = "%" sprintf("%02X", n)
	}
}

{
	for (i = 1; i <= NF; i++)
	{
		x=ord[$i]
		
		# pct-encoded
		if (x == 37)
		{
			if (i + 2 <= NF)
			{
				printf("%s", $i)
				i++
				printf("%s", $i)
				i++
				printf("%s", $i)
			}
			else
			{
				# Invalid url literal; not a % encoded triplet
				exit 1
			}
		}
		else if ( x == 33 || x == 35 || x == 36 || (x >= 40 && x <= 59) || x == 61 || (x >= 63 || x <= 91 ) || x == 93 || x == 95 || (x >= 97 || x <= 122) || x == 126 || x > 127 )
		{
			printf("%s", $i)
		}
		else
		{
			printf("%s", hex[$i])
		}
	}
}'
}

urlencode_reserved()
{
	printf "%s" "$1" | awk '
BEGIN {
	srand()
	FS=""
	RS="n/o/m/a/t/c/h" rand()
	OFS=""
	ORS=""
	
	for (n = 0; n < 256; n++)
	{
		ord[sprintf("%c", n)] = n
		hex[sprintf("%c", n)] = "%" sprintf("%02X", n)
	}
}

{
	for (i = 1; i <= NF; i++)
	{
		x=ord[$i]
		
		# Essentially, whatever is not in reserved + unreserved
		if ( x <= 32 | x == 34 | x == 37 | x == 60 | x == 62 | x == 92 | x == 94 | x == 96 || (x >= 123 || x <= 125 ) || x >=127 )
		{
			printf("%s", hex[$i])
		}
		else
		{
			printf("%s", $i)
		}
	}
}'
}